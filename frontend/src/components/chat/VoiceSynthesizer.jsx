import React, { useState, useEffect } from 'react';
import { getCharacters, generateSpeech } from '../../services/voiceService';

// Component giao di·ªán ch√≠nh
const VoiceSynthesizer = () => {
  // State ƒë·ªÉ l∆∞u danh s√°ch nh√¢n v·∫≠t
  const [characters, setCharacters] = useState([]);
  // State ƒë·ªÉ l∆∞u nh√¢n v·∫≠t ƒëang ƒë∆∞·ª£c ch·ªçn
  const [selectedCharacter, setSelectedCharacter] = useState('');
  // State cho vƒÉn b·∫£n ng∆∞·ªùi d√πng nh·∫≠p
  const [text, setText] = useState('Xin ch√†o, ƒë√¢y l√† H·ªôi ƒë·ªìng Qu√¢n s∆∞.');
  // State ƒë·ªÉ l∆∞u URL c·ªßa file audio ƒë√£ t·∫°o
  const [audioUrl, setAudioUrl] = useState(null);
  // State ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i loading
  const [isLoading, setIsLoading] = useState(false);
  // State ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói
  const [error, setError] = useState('');

  // Hook useEffect ƒë·ªÉ t·∫£i danh s√°ch nh√¢n v·∫≠t khi component ƒë∆∞·ª£c render l·∫ßn ƒë·∫ßu
  useEffect(() => {
    const fetchCharacters = async () => {
      try {
        const data = await getCharacters();
        const characterNames = (data.characters || []).map(c => c.name);
        setCharacters(characterNames);
        
        // T·ª± ƒë·ªông ch·ªçn nh√¢n v·∫≠t ƒë·∫ßu ti√™n trong danh s√°ch n·∫øu c√≥
        if (characterNames.length > 0) {
          setSelectedCharacter(characterNames[0]);
        }
      } catch (err) {
        setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n v·∫≠t. Vui l√≤ng ki·ªÉm tra xem backend ƒë√£ ch·∫°y ch∆∞a.');
      }
    };
    
    fetchCharacters();
  }, []); // M·∫£ng r·ªóng `[]` ƒë·∫£m b·∫£o hook n√†y ch·ªâ ch·∫°y m·ªôt l·∫ßn duy nh·∫•t

  // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "T·∫°o Gi·ªçng N√≥i"
  const handleGenerateSpeech = async () => {
    if (!text || !selectedCharacter) {
      setError('Vui l√≤ng ch·ªçn nh√¢n v·∫≠t v√† nh·∫≠p vƒÉn b·∫£n.');
      return;
    }
    
    setIsLoading(true);
    setError('');
    setAudioUrl(null); // X√≥a audio c≈©
    
    try {
      const url = await generateSpeech(text, selectedCharacter);
      setAudioUrl(url);
    } catch (err) {
      setError('T·∫°o gi·ªçng n√≥i th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsLoading(false);
    }
  };

  // JSX ƒë·ªÉ render giao di·ªán
  return (
    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif', maxWidth: '600px', margin: 'auto', border: '1px solid #ccc', borderRadius: '8px' }}>
      <h2 style={{ textAlign: 'center' }}>H·ªôi ƒê·ªìng Qu√¢n S∆∞ - Voice Synthesizer</h2>
      
      {/* Dropdown ch·ªçn nh√¢n v·∫≠t */}
      <div style={{ marginBottom: '15px' }}>
        <label htmlFor="character-select" style={{ marginRight: '10px' }}>Ch·ªçn nh√¢n v·∫≠t:</label>
        <select
          id="character-select"
          value={selectedCharacter}
          onChange={(e) => setSelectedCharacter(e.target.value)}
          disabled={characters.length === 0 || isLoading}
          style={{ padding: '8px' }}
        >
          {characters.length > 0 ? (
            characters.map((char) => (
              <option key={char} value={char}>
                {char}
              </option>
            ))
          ) : (
            <option>ƒêang t·∫£i...</option>
          )}
        </select>
      </div>

      {/* Textarea ƒë·ªÉ nh·∫≠p vƒÉn b·∫£n */}
      <div style={{ marginBottom: '15px' }}>
        <textarea
          value={text}
          onChange={(e) => setText(e.target.value)}
          rows="5"
          style={{ width: '100%', padding: '10px', boxSizing: 'border-box', resize: 'vertical' }}
          placeholder="Nh·∫≠p vƒÉn b·∫£n c·∫ßn ƒë·ªçc..."
          disabled={isLoading}
        />
      </div>

      {/* N√∫t b·∫•m ƒë·ªÉ t·∫°o gi·ªçng n√≥i */}
      <button
        onClick={handleGenerateSpeech}
        disabled={isLoading}
        style={{ padding: '10px 20px', cursor: 'pointer', width: '100%', fontSize: '16px' }}
      >
        {isLoading ? 'ƒêang x·ª≠ l√Ω...' : 'T·∫°o Gi·ªçng N√≥i üéôÔ∏è'}
      </button>

      {/* Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ */}
      {error && <p style={{ color: 'red', marginTop: '15px' }}>{error}</p>}
      
      {/* Hi·ªÉn th·ªã tr√¨nh ph√°t audio khi ƒë√£ c√≥ k·∫øt qu·∫£ */}
      {audioUrl && (
        <div style={{ marginTop: '20px' }}>
          <h4>K·∫øt qu·∫£:</h4>
          <audio controls autoPlay src={audioUrl} style={{ width: '100%' }}>
            Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ th·∫ª audio.
          </audio>
        </div>
      )}
    </div>
  );
};

export default VoiceSynthesizer;
