# endpoint_analysis.py

"""
Ph√¢n t√≠ch v√† t√†i li·ªáu h√≥a t·∫•t c·∫£ endpoint trong h·ªá th·ªëng PersonaRAG
"""

import sys
from pathlib import Path

def analyze_endpoints():
    """Ph√¢n t√≠ch t·∫•t c·∫£ endpoint trong h·ªá th·ªëng"""
    print("üîç PH√ÇN T√çCH ENDPOINT SYSTEM")
    print("=" * 80)
    
    endpoints = {
        "CORE API ENDPOINTS": {
            "/": {
                "method": "GET",
                "file": "main.py",
                "purpose": "Health check endpoint g·ªëc",
                "description": "Ki·ªÉm tra service c√≥ ho·∫°t ƒë·ªông kh√¥ng"
            }
        },
        
        "CHAT ENDPOINTS - Character Chat System": {
            "/api/v1/chat/": {
                "method": "POST", 
                "file": "api/v1/chat.py",
                "purpose": "üé≠ ENDPOINT CH√çNH cho chat v·ªõi nh√¢n v·∫≠t",
                "description": "Chat v·ªõi AI character s·ª≠ d·ª•ng GGUF model + RAG enhanced",
                "features": [
                    "‚úÖ Advanced prompt validation (ch·ªß c√¥ng/th·∫ßn)", 
                    "‚úÖ Session management",
                    "‚úÖ RAG integration optional",
                    "‚úÖ Character-specific personality",
                    "‚úÖ Full conversation context"
                ],
                "request": "ChatRequest(message, character_name, session_id, use_rag)",
                "response": "ChatResponse(response, success, session_id, metadata)"
            },
            "/api/v1/chat/start": {
                "method": "POST",
                "file": "api/v1/chat.py", 
                "purpose": "Kh·ªüi t·∫°o conversation session",
                "description": "T·∫°o session m·ªõi v√† l·ªùi ch√†o t·ª´ character"
            }
        },
        
        "RAG ENDPOINTS - Knowledge-Based Chat": {
            "/api/v1/rag/advice": {
                "method": "POST",
                "file": "api/v1/rag.py",
                "purpose": "üß† ENDPOINT T∆Ø V·∫§N s·ª≠ d·ª•ng RAG",
                "description": "T∆∞ v·∫•n nhanh d·ª±a tr√™n knowledge base + character personality",
                "features": [
                    "‚úÖ RAG-powered responses",
                    "‚úÖ Quick advice format", 
                    "‚úÖ Knowledge base search",
                    "‚úÖ Character personality maintained",
                    "‚úÖ Recently updated v·ªõi advanced prompt validation"
                ],
                "request": "AdviceRequest(question, character_id, context)",
                "response": "AdviceResponse(advice, sources, confidence)",
                "use_case": "Frontend s·ª≠ d·ª•ng cho quick advice"
            },
            "/api/v1/rag/search": {
                "method": "POST",
                "file": "api/v1/rag.py",
                "purpose": "T√¨m ki·∫øm context t·ª´ knowledge base",
                "description": "Search relevant information cho c√¢u h·ªèi"
            },
            "/api/v1/rag/characters": {
                "method": "GET",
                "file": "api/v1/rag.py",
                "purpose": "List available characters",
                "description": "Danh s√°ch nh√¢n v·∫≠t c√≥ s·∫µn trong system"
            },
            "/api/v1/rag/knowledge-base/initialize": {
                "method": "POST",
                "file": "api/v1/rag.py", 
                "purpose": "Kh·ªüi t·∫°o knowledge base",
                "description": "Setup vector database v·ªõi character data"
            }
        },
        
        "AI CHAT ENDPOINTS - Direct Model Access": {
            "/api/v1/ai/chat": {
                "method": "POST",
                "file": "api/v1/chat_ai.py",
                "purpose": "ü§ñ Direct AI model chat",
                "description": "Chat tr·ª±c ti·∫øp v·ªõi GGUF model kh√¥ng qua character layer",
                "features": [
                    "üîß Model configuration",
                    "üîß Custom system prompts", 
                    "üîß Streaming support",
                    "üîß History management"
                ],
                "use_case": "Development v√† testing AI model"
            },
            "/api/v1/ai/chat/stream": {
                "method": "POST",
                "file": "api/v1/chat_ai.py",
                "purpose": "Streaming AI responses",
                "description": "Real-time streaming cho responses d√†i"
            },
            "/api/v1/ai/configure": {
                "method": "POST",
                "file": "api/v1/chat_ai.py",
                "purpose": "Configure AI model parameters",
                "description": "Thay ƒë·ªïi temperature, max_tokens, etc."
            }
        },
        
        "VOICE/TTS ENDPOINTS": {
            "/api/v1/voice/setup-character-voice": {
                "method": "POST",
                "file": "api/v1/voice.py",
                "purpose": "Setup gi·ªçng n√≥i cho character",
                "description": "Upload v√† configure voice samples"
            },
            "/api/v1/voice/generate-speech": {
                "method": "POST", 
                "file": "api/v1/voice.py",
                "purpose": "T·∫°o speech t·ª´ text",
                "description": "Text-to-speech v·ªõi character voice"
            },
            "/api/v1/voice/characters": {
                "method": "GET",
                "file": "api/v1/voice.py",
                "purpose": "List characters c√≥ voice",
                "description": "Danh s√°ch character ƒë√£ setup voice"
            }
        },
        
        "TTS OPTIMIZED ENDPOINTS": {
            "/api/v1/tts/synthesize": {
                "method": "POST",
                "file": "api/v1/tts_optimized.py", 
                "purpose": "üéµ TTS synthesis optimized",
                "description": "Optimized F5-TTS synthesis v·ªõi improved settings",
                "features": [
                    "‚úÖ Enhanced voice settings (emotion, breath)",
                    "‚úÖ Batch processing",
                    "‚úÖ Caching",
                    "‚úÖ Performance monitoring"
                ]
            },
            "/api/v1/tts/synthesize-batch": {
                "method": "POST",
                "file": "api/v1/tts_optimized.py",
                "purpose": "Batch TTS processing",
                "description": "Process multiple texts c√πng l√∫c"
            },
            "/api/v1/tts/stats": {
                "method": "GET", 
                "file": "api/v1/tts_optimized.py",
                "purpose": "TTS performance statistics",
                "description": "Monitor TTS service performance"
            }
        }
    }
    
    print("\nüìã **ENDPOINT COMPARISON: /chat vs /rag/advice**")
    print("=" * 80)
    
    comparison = {
        "Purpose": {
            "/api/v1/chat/": "Full conversation v·ªõi character personality",
            "/api/v1/rag/advice": "Quick advice v·ªõi RAG knowledge"
        },
        "Use Case": {
            "/api/v1/chat/": "Interactive chat session, roleplay",
            "/api/v1/rag/advice": "Quick Q&A, knowledge lookup"
        },
        "Session Management": {
            "/api/v1/chat/": "‚úÖ Full session v·ªõi history",
            "/api/v1/rag/advice": "‚ùå Stateless, no session"
        },
        "Response Style": {
            "/api/v1/chat/": "Conversational, contextual",
            "/api/v1/rag/advice": "Direct advice format"
        },
        "RAG Integration": {
            "/api/v1/chat/": "Optional (use_rag parameter)",
            "/api/v1/rag/advice": "Always enabled"
        },
        "Performance": {
            "/api/v1/chat/": "Slower (full conversation processing)",
            "/api/v1/rag/advice": "Faster (focused advice)"
        },
        "Frontend Usage": {
            "/api/v1/chat/": "Main chat interface",
            "/api/v1/rag/advice": "Quick advice widgets, suggestions"
        }
    }
    
    for aspect, details in comparison.items():
        print(f"\n**{aspect}:**")
        for endpoint, desc in details.items():
            print(f"   {endpoint}")
            print(f"     ‚Üí {desc}")
    
    print(f"\nüéØ **L√ù DO C√ì 2 ENDPOINT CHAT:**")
    print("=" * 80)
    
    reasons = [
        "üé≠ **Separation of Concerns:**",
        "   - /chat/: Full interactive conversation system",
        "   - /rag/advice: Specialized knowledge-based Q&A",
        "",
        "üöÄ **Performance Optimization:**", 
        "   - /chat/: Heavy processing v·ªõi session management",
        "   - /rag/advice: Lightweight cho quick responses",
        "",
        "üé® **Frontend Flexibility:**",
        "   - Chat widget s·ª≠ d·ª•ng /chat/ cho conversation",
        "   - Advice panels s·ª≠ d·ª•ng /rag/advice cho suggestions",
        "",
        "üîß **Different Processing Pipelines:**",
        "   - /chat/: Character ‚Üí Session ‚Üí AI ‚Üí Validation ‚Üí Response",
        "   - /rag/advice: Question ‚Üí RAG Search ‚Üí Character Filter ‚Üí Advice",
        "",
        "üì± **User Experience:**",
        "   - /chat/: Immersive roleplay experience",
        "   - /rag/advice: Quick help v√† productivity focus"
    ]
    
    for reason in reasons:
        print(reason)
    
    print(f"\nüí° **BEST PRACTICES:**")
    print("=" * 80)
    
    practices = [
        "‚úÖ Use /chat/ cho main conversation interface",
        "‚úÖ Use /rag/advice cho quick help features", 
        "‚úÖ Frontend c√≥ th·ªÉ combine c·∫£ hai cho rich UX",
        "‚úÖ /chat/ cho social/emotional interaction",
        "‚úÖ /rag/advice cho practical/factual queries",
        "‚úÖ Monitor both endpoints cho performance optimization"
    ]
    
    for practice in practices:
        print(f"   {practice}")
    
    # Display detailed endpoints
    print(f"\nüìö **CHI TI·∫æT T·∫§T C·∫¢ ENDPOINTS:**")
    print("=" * 80)
    
    for category, endpoints_list in endpoints.items():
        print(f"\nüî∏ **{category}**")
        print("-" * 60)
        
        for endpoint, details in endpoints_list.items():
            print(f"\n   {details['method']} {endpoint}")
            print(f"   üìÅ File: {details['file']}")
            print(f"   üéØ Purpose: {details['purpose']}")
            print(f"   üìù Description: {details['description']}")
            
            if 'features' in details:
                print(f"   ‚ú® Features:")
                for feature in details['features']:
                    print(f"      {feature}")
            
            if 'request' in details:
                print(f"   üì§ Request: {details['request']}")
            
            if 'response' in details:
                print(f"   üì• Response: {details['response']}")
            
            if 'use_case' in details:
                print(f"   üíº Use Case: {details['use_case']}")

if __name__ == "__main__":
    analyze_endpoints()
